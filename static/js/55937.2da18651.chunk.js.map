{"version":3,"file":"static/js/55937.2da18651.chunk.js","mappings":"sFAAAA,MAAMC,UAAUC,OAAS,CACxB,QAAW,CACVC,QAAS,2DACTC,YAAY,GAEb,UAAa,CACZD,QAAS,0CACTE,MAAO,eAER,OAAU,CACTF,QAAS,kBACTG,QAAQ,GAET,QAAW,oOACX,SAAY,CACX,CACCH,QAAS,aACTC,YAAY,EACZC,MAAO,UAER,CAECF,QAAS,6BACTC,YAAY,IAGd,QAAW,yBACX,MAAS,CACRD,QAAS,OACTE,MAAO,YAGR,OAAU,oBACV,SAAY,wDACZ,YAAe,cAGhBL,MAAMO,MAAMC,IAAI,mBAAmB,SAAUC,GAC5C,IACIC,GAAY,EAEhBV,MAAMC,UAAU,qBAAqBU,kBAAkBF,EAAK,SAHxC,uGAGiE,SAAUG,GAC9F,IAAIC,EAAW,iBAAiBC,KAAKF,GACrC,GAAIC,EAAU,CACb,IAAIE,EAAMF,EAAS,GACnB,GAAY,QAARE,IAAkBL,EAErB,OADAA,GAAY,GACL,EACD,GAAY,WAARK,EAEV,OADAL,GAAY,GACL,EAIT,OAAQA,QAIVV,MAAMO,MAAMC,IAAI,kBAAkB,SAAUC,GAC3CT,MAAMC,UAAU,qBAAqBe,qBAAqBP,EAAK","sources":["../node_modules/prismjs/components/prism-liquid.js"],"sourcesContent":["Prism.languages.liquid = {\n\t'comment': {\n\t\tpattern: /(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,\n\t\tlookbehind: true\n\t},\n\t'delimiter': {\n\t\tpattern: /^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,\n\t\talias: 'punctuation'\n\t},\n\t'string': {\n\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\tgreedy: true\n\t},\n\t'keyword': /\\b(?:as|assign|break|continue|cycle|decrement|echo|else|elsif|(?:end)?(?:capture|case|comment|for|form|if|paginate|style|raw|tablerow|unless)|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,\n\t'function': [\n\t\t{\n\t\t\tpattern: /(\\|\\s*)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'filter'\n\t\t},\n\t\t{\n\t\t\t// array functions\n\t\t\tpattern: /(\\.\\s*)(?:first|last|size)/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'boolean': /\\b(?:true|false|nil)\\b/,\n\t'range': {\n\t\tpattern: /\\.\\./,\n\t\talias: 'operator'\n\t},\n\t// https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21\n\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,\n\t'operator': /[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|or|contains(?=\\s))\\b/,\n\t'punctuation': /[.,\\[\\]()]/\n};\n\nPrism.hooks.add('before-tokenize', function (env) {\n\tvar liquidPattern = /\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g;\n\tvar insideRaw = false;\n\n\tPrism.languages['markup-templating'].buildPlaceholders(env, 'liquid', liquidPattern, function (match) {\n\t\tvar tagMatch = /^\\{%-?\\s*(\\w+)/.exec(match);\n\t\tif (tagMatch) {\n\t\t\tvar tag = tagMatch[1];\n\t\t\tif (tag === 'raw' && !insideRaw) {\n\t\t\t\tinsideRaw = true;\n\t\t\t\treturn true;\n\t\t\t} else if (tag === 'endraw') {\n\t\t\t\tinsideRaw = false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn !insideRaw;\n\t});\n});\n\nPrism.hooks.add('after-tokenize', function (env) {\n\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid');\n});\n"],"names":["Prism","languages","liquid","pattern","lookbehind","alias","greedy","hooks","add","env","insideRaw","buildPlaceholders","match","tagMatch","exec","tag","tokenizePlaceholders"],"sourceRoot":""}